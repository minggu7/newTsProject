프론트 기본 세팅 다 하고나서.

먼저 받을 타입 세팅 하기

types 폴더에 board.ts 파일 생성

그다음 api 관련해서 모아놓은 api.ts

그다음 프론트 페이지 구조 짜고.

-------------------------서버연동 express------------------------------
이제 서버 연결

cd backend
npm install express cors helmet morgan dotenv
	- express 는 서버 프레임워크고
	- cors: 다른곳에서 자원 가져오는 경우 커팅
 	- helmet: 서버 보안상 취약점 보완
	- dotenv: 외부에 공유하지않기위해 특별하게 값들 저장해놓고 자유롭게 쓸 수 있게함
	- morgan: 요청과 응답에 대한 정보를 콘솔에 추가적으로 찍음

그다음 개발 의존성으로 설치
npm install -D @types/express @types/cors @types/morgan @types/node nodemon ts-node
최적화 목적


진행순서

0. 환경설정
1. 서버 구동 확인 → 기본 동작 확인
2. API 테스트 → 프론트엔드 연동 확인
3. DB 연결 → 실제 데이터로 확장
4. PM2 → 나중에 배포할 때



날짜변환 함수 어디에 넣어놓고 재사용하기.

DB에 계정 만들어놓고.
--SELECT grantee, table_schema, table_name, privilege_type
--FROM information_schema.role_table_grants
--WHERE grantee = 'kmg2388';
-- GRANT ALL PRIVILEGES ON TABLE news_details TO kmg2388;

스키마도 따로 만들었음. myboard.(현재 테이블 X)


이제 backend 폴더에서 아래 명려어 실행
- npm install pg(포ㅓ스트그레)
- npm install -D @types/pg(개발 단계에서 사용)

express 요청, 응답 구조
.get('/posts', async (require, res) => {......
첫 번째 매개변수: 요청받을 URL 경로
두 번째 매개변수: 요청/응답 객체를 받는 함수.

async는?? 함수 내부에서 비동기 작업(await)쓸 수 있게 해줌
데이터 요청 후 다 받으면 다음 로직 진행하려고.


-----------------express에서 넘어온 데이터 가공하는법--------------------

1. url 형식으로 넘어온 값(GET)
Ex) axios.get('/posts?id=6&page=2) 이렇게 넘겨주면
    app.get('/posts', (req, res) => {
    const id = req.query.id; // "6"
    const page = req.query.page; // "2"
});

req.query.value 형태로 받음


2. 비동기 요청으로 넘어온 값(POST)
Ex) axios.post('/posts', {
       title: '제목',
       content: '내용',
       author: '작성자'
});
이렇게 넘겨주면

app.post('/posts', (req, res) => {
      const title = req.body.title;
      const content = req.body.content;
      const author = req.body.author;
});

req.body.value 형태로 받음

--------------------게시글에서 가장 중요한 재귀함수--------------------
`
                    WITH RECURSIVE board_tree AS (
                      SELECT
                        my_board_pk,
                        my_board_title,
                        my_board_author,
                        my_board_content,
                        my_board_create_at,
                        my_board_update_at,
                        my_board_view_count,
                        my_board_parent_pk,
                        1 AS depth,
                        CAST(my_board_pk AS TEXT) AS path
                      FROM myboard.myboard
                      WHERE my_board_parent_pk IS NULL
              
                      UNION ALL
              
                      SELECT
                        c.my_board_pk,
                        c.my_board_title,
                        c.my_board_author,
                        c.my_board_content,
                        c.my_board_create_at,
                        c.my_board_update_at,
                        c.my_board_view_count,
                        c.my_board_parent_pk,
                        p.depth + 1 AS depth,
                        p.path || '>' || c.my_board_pk AS path
                      FROM myboard.myboard c
                      JOIN board_tree p ON c.my_board_parent_pk::int = p.my_board_pk
                    )
                    SELECT *
                    FROM board_tree
                    ORDER BY path
                    LIMIT $1 OFFSET $2
                    `,
                    [limit, offset]
                  );


잘 보면 > 를 사용해서 path 로 재귀 구조 나타냄.
일치하면 id기준으로 새겨지는거
1 > 5 > 7
그리고 path 기준으로 ASC 했으니?

1 > 5 > 7
1 > 5 > 4
1 > 8 > 1
10 > 3> 7 이런식이면

1 이 가장 먼저오고 그다음 5 그다음 7 그다음 4
그러니까 1 > 5 > 4 가 가장 먼저 옴. 그다음 뭐 1 > 5 > 4 이런식으로
동일한 깊이에 대해서 가장 높은 숫자가 먼저옴

날짜 함수 공통으로 만들고 사용해서 날짜 형변환.

그 후에는 로그인부터 쭉.

다시 게시판쪽 오면 첨부파일 넣기.

구조분해 할당 중요.
name 값과 value값만 받아서
[name] : value 로 name으로 설정된 속성값 : 해당 값. 으로 컨트롤

    const [form, setForm] = useState<signUpType>({
        userId: '',
        userPassword: ''
    });

타입 파일 임포트 후 (signUpType) 저렇게 사용.

데이터 체크만 하고 확인하는 경우(유무 확인)
 count 보다는 exists로 하자

쿼리바인딩이 중요(포스트그레)
$1 하면 첫번째 파라미터임
const result =await db.query(
            `
                SELECT 1
                FROM myuser
                WHERE userId = $1
            `,
            [userInputId]
        );

이렇게 , [userInputId]로

React.FormEvent는 "React에서 form 관련 이벤트가 발생할 때 전달되는 객체의 타입"입니다.
이 객체를 통해
기본 동작 막기 (e.preventDefault())
이벤트가 발생한 요소 정보 접근 (e.target)
기타 이벤트 관련 정보 활용

뭐가  어디서 form 작동시켰는지 받아주는놈이라 생각하면 됨


또다른 구조분해 할당 구문 있음
const response = await api.post(`/userSignUp`, form);
  const { status, message } = response.data;
  return { status, message };

이런식으로 response에 있는 status, message 빼오기

회원가입 후 아이디 영역 disabled, 

시큐리티랑 jwt먼저
이거 하고 게시판 내부로 고고.
첨부파일 속성 추가(게시글 DB), 첨부파일 테이블 추가
글 작성부터


//인증 인가 구현. jwt 구현

백엔드에 패키지 설정
PS C:\Users\WINITECH\Desktop\타입스 예제 만들어보기> cd backend
PS C:\Users\WINITECH\Desktop\타입스 예제 만들어보기\backend> npm install jsonwebtoken bcryptjs
npm install -D @types/jsonwebtoken @types/bcryptjs


이제 하나씩 보자.
가장 위에부터

먼저 import 부분이다.
import jwt from 'jsonwebtoken';
import bcrypt from 'bcryptjs';

그 다음 .env 파일에서 환경설정한 값을 가져와서 사용해도 좋고 임시 비밀키 내가 만들어도 좋다.

//JWT 설정
const JWT_SECRET = process.env.JWT_SECRET || `아무거나`;
const JWT_EXPIRES_IN = '24h;//유효시간

//jwt 토큰 생성
const generateToken = (userId: string): string => {
	return jwt.sign({ userId }, JWT_SECRET, {expiresIn: JWT_EXPIRES_IN});// 사용할(저장) 값(현재는 userId만), 비밀키, 유효시간을 매개변수로 사용
}

//JWT 토큰 검증.
const verifyToken = (token: string) : any => {
	try{
		return jwt.verify(token, JWT_SECRET);// 아까 사용한 비밀키 그대로 사용해서 복호화 후 확인
	} catch(error){
		return null;
	}
}

//이건 비밀번호 해싱(솔트값 줘서 무작위로 암호화)
const hashPassword = async (password:string): Promise<string> => {
	const saltRounds = 10;
	return await bcrypt.hash(password, saltRounds);
}

//비밀번호 검증
const comparePassword = async (password: string, hashedPassword: string): Promise<boolean> => {
	return await bcrypt.compare(password, hashedPassword);
}

//인증 미들웨어





먼저 이해하자
클라이언트가 서버에 요청을 보낼 때, 사용자의 인증 상태를 나타내기 위해 HTTP의 Authorization 헤더에 Bearer 토큰이 포함

Authorization 헤더는 HTTP 프로토콜에서 클라이언트가 서버에 인가된 상태임을 전달하는 수단으로 사용됩니다. 이는 사용자 인증을 거친 후, 서버에 자신의 신원을 증명하기 위해 필수적입니다. 일반적으로 다음과 같은 구조를 가집니다.

Authorization: <스키마> <자격 증명>
여기서 <스키마>는 인증 방식(예: Basic, Bearer)을 나타내고, <자격 증명>은 클라이언트의 인증 정보를 포함합니다. Bearer는 이러한 인증 방식


다 하고나서 INSERt문들에 채번 진행 후 마저진행

--------------------------------------------------------------------------토큰기본설정완료--------------------------------------------------------------------
스테이트리스(무상태성) 리프레시 로테이트 형식으로 구현함

위 방식으로 쭉 진행하기위해서는 추가적인 작업 몇 개 필요함

0. 로그아웃 시 토큰 반납(access 와 refreshtoken 둘 다)
	> ts 파일 먼저 설정. 받아야 하는 값은? 리프레시 토큰 값이랑 userId?? 
		> api 요청 부분 구현
			> 서버 코드 구현(쿼리)
				>반환값은 status와 message로(완)
1. 만약 토큰 가지고 있는 상태로 url접속(흔히 크롬 자동완성 rul이나 뒤;로가기, 즐겨찾기 등) 시 검증 후 로그인 하지않고 사용하게 해줘야함
2. 토큰 재발급. AccessToken 만료 시 1. 먼저 RefreshToken 여부 확인하고 RefreshToken 있으면 검증 하지않고 새로 발급.
			           2. RefreshToken없으면? 똑같이 검증 후 access 토큰과 refresh토큰 재발급
3. 라우트마다 인증/인가 설정.(SpringSecurity에서 한것처럼 url마다 지정) (굳이 구현 X)
4. 자동 로그인 유지(이게 2번하고 같은거 아닌가?)








-------------------------------------토큰 끝. 로직 시작(타입스크립트 적극 사용. 어디에서나 사용하기)----------------------------------------------
1. 게시글 작성부터. C.R.U.D 고고. 토큰은 끝







----------------------------------------본격적으로 구조 부터 설계하고 진행하자-----------------------------
진행 순서 요약
1. AppLayout.jsx(전체 레이아웃) 생성
2. Header.jsx, Sidebar.jsx, QuickMenu.jsx 생성
	Header- Header의 경우 공통적으로 위에 붙긴 할건데. list형태로 쉽게  나타내자.
		> 고정된 타입으로 제공하자. title(제목), url(이동 url 제공), explanation(내용. ux로 표시는 안할거임),
3. App.tsx에서 AppLayout으로 감싸기
4. Main 영역에 라우팅된 페이지(children) 표시
5. 각 컴포넌트에 임시 내용/스타일 추가
6. 실제 기능/디자인 추가

완료. 참고로 현재 구조는 메인 페이지가 새로 바뀔 때마다 전체 새 요청이 아니라, Main 영역만 리렌더링 되고, 필요한 데이터만 비동기로 요청됨.(SPA 방식이라 하나의 main페이지만 리렌더링)
Main 영역에 마운트되는 컴포넌트가 useEffect 등에서 API 요청을 하면
그때만 비동기로 데이터 요청이 발생합니다.
Ex) 공지 페이지(NoticePage)에서 초기접속 시 useEffect 하고 async로 필요한 데이터만 불러오고 싹 갈아엎는것처럼
이 useEffect가 Main 영역에 BoardListPage가 마운트될 때만 실행
→ 이때만 비동기로 데이터 요청이 발생

퀵 메뉴의 겯ㅇ우 각 메뉴에서 사용자들이 들어올 때 마다 카운팅하고
가장 많이 들어가는걸로 세팅. DB에서 값 뿌려오기

1.로그인, 로그아웃 우측으로 밀기.(완)  권한 속성값 생성(완)
토큰에 권한 값도 넣기
-  권한(role)은 토큰(JWT) payload에만 포함
-  필요할 때 토큰을 디코딩해서 권한 체크

토큰검사 로직 넣기
eX) 로그인 하지않은 사용자라면? 메인페이지에서 "로그인"만 뜨고
로그인 한 사용자라면 "로그인" 안보이고 "로그아웃" 보이게하기.

권한에 따른 작동 진행
Ex) 관리자 권한이면 어떤메뉴 까지 보이고 안보이고.

생성할 때 role 권한 넣어주는거는 됨
지금 index.ts에서 난 오류는 토큰 재발급 시 권한에 관한 부분임. 재발급  로직 쭉 따라가서 로컬 스토리지에서 값 가져오는거나 새로 발급해주는부분 부터 해서
role권한까지 재발급 시 토큰 만들 때 넣어주고 다시 쭉 진행. (그 다음은 검증이나 검사 로직 등)(완)

게시글 작성 로직 진행(완료)


먼저 프로젝트 조금만 손보기
index.ts 의 쿼리문 분리 or 각 쿼리를 역할에 맞게 분류해야할듯.

최종 변경 후 기존꺼하고 비교. 차이점은? 득본거는?

구조 분리 시작.

index.ts 에 몰려있는 구조를 풀어내기로 함.

먼저 게시글 타입 선언
1. board.ts 선언.
2. boardMapper.ts 구현. 실제 쿼리는 나중에 넣고 일단 함수 구조 먼저 반영
3. boardService.ts 파일에 비즈니스 로직  생성
4. boardRouters 에 기능별 라우터 생성
5. index.ts에 boardRoutes 등록.
 - 
Express에서 app.use()는
"이 미들웨어(혹은 라우터)를 모든 요청에 적용해라"라는 의미입니다.
여기서 boardRoutes는
routes/boardRoutes.ts에서 export한 라우터 객체입니다.
즉,
boardRoutes에 정의된 모든 라우트(예: /posts, /postsCreate 등)를
Express 앱에 등록해서, 해당 경로로 들어오는 요청을 처리할 수 있게 해준다

지금부터 요청, 응답 구조는 타입생성, 프론트 => 라우터 => Service => Mapper 임. 최종적으로 해당 라우터는 index.ts에서 선언하고 url 일치시 작동시킬계획

전체 요청/응답 구조 및 역할
1. 타입 생성
/types/board.ts 등에서 요청/응답에 사용할 타입을 정의
2. 요청 흐름
(1) 프론트엔드
예: BoardListPage.tsx에서 getPosts 등 API 함수 호출
(2) 라우터 (Router)
예: routes/boardRoutes.ts
/posts, /postsCreate 등 엔드포인트 정의
요청이 들어오면 Service로 위임
(3) 서비스 (Service)
예: services/boardService.ts
비즈니스 로직 처리
Mapper 호출
(4) 매퍼 (Mapper)
예: services/boardMapper.ts
실제 DB 쿼리 실행
3. 응답 흐름
Mapper → Service → Router → 프론트엔드로 응답 반환
4. index.ts에서 라우터 등록
import boardRoutes from './routes/boardRoutes';
app.use(boardRoutes);
이렇게 하면, boardRoutes에 정의된 URL과 프론트에서 요청하는 URL이 일치할 때 해당 라우터가 작동

const response = await getPostDetail(myBoardPk);

--------------------------------------------------------------------------------------이쯤에서 전체 흐름 복습---------------------------------------------------------------------------------------------------------------------------

파일관련

예시
1. 사용자가 "이미지 첨부" 버튼을 클릭해서 cat.jpg 파일을 선택
2. uploadFile 함수가 실행됨
	- fileArr에 cat.jpg 파일이 들어감
	- setPostImg(Array.from(fileArr))로 postImg 상태에 [cat.jpg] 저장
	- FileReader가 cat.jpg를 읽어서 base64로 변환
	- setPreviewImg(fileRead.result)로 previewImg 상태에 base64 이미지 저장
3. 화면에 미리보기 이미지가 나타남












































